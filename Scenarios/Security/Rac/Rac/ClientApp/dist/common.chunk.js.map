{"version":3,"sources":["D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/organizationUnit/organizationUnit.service.ts","D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/role/role.service.ts","D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/tenant/tenant.service.ts","D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/tenant/tenant.thflookup.service.ts","D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/utils/hub-api.ts","D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/utils/hub-crud-component-edit.ts","D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/utils/hub-crud-component-list.ts","D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/utils/hub-crud-service.ts","D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/utils/hub-entity.ts"],"names":[],"mappings":"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","file":"common.chunk.js","sourcesContent":["import { HubEntity } from './../utils/hub-entity';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HubCRUDService } from '../utils/hub-crud-service';\r\nimport { HubApiQueryString } from '../utils/hub-api';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable()\r\n\r\n/**\r\n * @description\r\n * Essa classe permite fazer a configuração do serviço REST\r\n * @extends HubCRUDService\r\n */\r\nexport class OrganizationService extends HubCRUDService {\r\n\r\n    /** serviceName: define o nome do serviço para comunicação */\r\n    serviceName = 'organizationUnit';\r\n\r\n    /**\r\n     * Atributo com as colunas apresentadas na tabela da lista.\r\n     */\r\n    columns = [\r\n        { column: 'tenantName', label: 'Nome do Tenant' },\r\n        { column: 'name', label: 'Nome da Organização' },\r\n        { column: 'displayName', label: 'Nome de Exibição' }\r\n    ];\r\n\r\n    /**\r\n     * Construtor para inicializar a classe.\r\n     * @param http Serviço HTTP que permite realizar as requisições para o servidor.\r\n     */\r\n    constructor(http: HttpClient) {\r\n        super(http, OrganizationData);\r\n    }\r\n\r\n    /**\r\n       * Método que executa o get no servidor, passando parâmetros via query string, além dos path param.\r\n       * @param query Parâmetros query string.\r\n       * @param pathParam Parâmetros do pathParam.\r\n       */\r\n    getQueryByTenant(query: HubApiQueryString, tenantId, ...pathParam: Array<any>) {\r\n        const url = this.urlParser(...pathParam);\r\n        return this.http.get<any>(`${environment.managementEndPoint}/${this.baseUrl}/${this.serviceName}${url}/bytenant/${tenantId}`,\r\n            {\r\n                params: query.getQueryString()\r\n            });\r\n    }\r\n}\r\n\r\n/**\r\n * @description\r\n * A classe representa a entidade da tabela organization e os atributos\r\n * são equivalentes aos campos da tabela\r\n * @extends HubEntity\r\n */\r\nexport class OrganizationData extends HubEntity<number> {\r\n\r\n    public tenantId: number = 0;\r\n    public name: string = '';\r\n    public displayName: string = '';\r\n    public parentId: number = 0;\r\n\r\n    /**\r\n     * Método construtor para inicializar a classe organizations.\r\n     * @param Objeto representando a organizations.\r\n     */\r\n    constructor(obj = { id: undefined, name: '', displayName: '', parentId: 0, tenantId: 0 }) {\r\n        super();\r\n        this.id = obj.id;\r\n        this.tenantId = obj.tenantId;\r\n        this.name = obj.name;\r\n        this.displayName = obj.displayName;\r\n        this.parentId = obj.parentId;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/organizationUnit/organizationUnit.service.ts","import { HubEntity } from './../utils/hub-entity';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HubCRUDService } from '../utils/hub-crud-service';\r\nimport { environment } from '../../environments/environment';\r\nimport { HubApiQueryString } from '../utils/hub-api';\r\n\r\n@Injectable()\r\n\r\n/**\r\n * @description\r\n * Essa classe permite fazer a configuração do serviço REST\r\n * @extends HubCRUDService\r\n */\r\nexport class RoleService extends HubCRUDService {\r\n\r\n    /** serviceName: define o nome do serviço para comunicação */\r\n    serviceName = 'role';\r\n\r\n    /**\r\n     * Atributo com as colunas apresentadas na tabela da lista.\r\n     */\r\n    columns = [\r\n        { column: 'tenantName', label: 'Nome do Tenant' },\r\n        { column: 'name', label: 'Nome da Role' },\r\n        { column: 'displayName', label: 'Nome de Exibição' },\r\n        { column: 'isDefault', label: 'Padrão', type: 'check' }\r\n    ];\r\n\r\n    /**\r\n     * Construtor para inicializar a classe.\r\n     * @param http Serviço HTTP que permite realizar as requisições para o servidor.\r\n     */\r\n    constructor(http: HttpClient) {\r\n        super(http, RoleData);\r\n    }\r\n\r\n    /**\r\n     * Método que executa o get no servidor, passando parâmetros via query string, além dos path param.\r\n     * @param query Parâmetros query string.\r\n     * @param pathParam Parâmetros do pathParam.\r\n     */\r\n    getFeaturesByTenant(tenantId) {\r\n        return this.http.get<any>(`${environment.authorizationEndPoint}${this.baseUrl}/features/bytenant/${tenantId}`);\r\n    }\r\n\r\n    /**\r\n       * Método que executa o get no servidor, passando parâmetros via query string, além dos path param.\r\n       * @param query Parâmetros query string.\r\n       * @param pathParam Parâmetros do pathParam.\r\n       */\r\n    getQueryByTenant(query: HubApiQueryString, tenantId, ...pathParam: Array<any>) {\r\n        const url = this.urlParser(...pathParam);\r\n        return this.http.get<any>(`${environment.managementEndPoint}/${this.baseUrl}/${this.serviceName}${url}/bytenant/${tenantId}`,\r\n            {\r\n                params: query.getQueryString()\r\n            });\r\n    }\r\n}\r\n\r\n/**\r\n * @description\r\n * A classe representa a entidade da tabela role e os atributos\r\n * são equivalentes aos campos da tabela\r\n * @extends HubEntity\r\n */\r\nexport class RoleData extends HubEntity<number> {\r\n\r\n    public tenantId: number = 0;\r\n    public name: string = '';\r\n    public displayName: string = '';\r\n    public isDefault: boolean = false;\r\n    public permissions: string[] = [];\r\n\r\n    /**\r\n     * Método construtor para inicializar a classe roles.\r\n     * @param Objeto representando a roles.\r\n     */\r\n    constructor(obj = { id: undefined, name: '', displayName: '', isDefault: true, permissions: [], tenantId: 0 }) {\r\n        super();\r\n        this.id = obj.id;\r\n        this.tenantId = obj.tenantId;\r\n        this.name = obj.name;\r\n        this.displayName = obj.displayName;\r\n        this.isDefault = obj.isDefault;\r\n        this.permissions = obj.permissions ? obj.permissions.map(p => p.name || p) : [];\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/role/role.service.ts","import { HubEntity } from './../utils/hub-entity';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { HubCRUDService } from '../utils/hub-crud-service';\r\n\r\n@Injectable()\r\n\r\n/**\r\n * @description\r\n * Essa classe permite fazer a configuração do serviço REST\r\n * @extends HubCRUDService\r\n */\r\nexport class TenantService extends HubCRUDService {\r\n\r\n    /** serviceName: define o nome do serviço para comunicação */\r\n    serviceName = 'tenant';\r\n\r\n    /**\r\n     * Atributo com as colunas apresentadas na tabela da lista.\r\n     */\r\n    columns = [\r\n        { column: 'tenantName', label: 'Nome do Tenant' },\r\n        { column: 'name', label: 'Nome de Exibição' },\r\n        // { column: 'connectionString', label: 'String de Conexão' },\r\n        { column: 'isActive', label: 'Ativo', type: 'check' }\r\n    ];\r\n\r\n    /**\r\n     * Construtor para inicializar a classe.\r\n     * @param http Serviço HTTP que permite realizar as requisições para o servidor.\r\n     */\r\n    constructor(http: HttpClient) {\r\n        super(http, TenantData);\r\n    }\r\n}\r\n\r\n/**\r\n * @description\r\n * A classe representa a entidade da tabela tenant e os atributos\r\n * são equivalentes aos campos da tabela\r\n * @extends HubEntity\r\n */\r\nexport class TenantData extends HubEntity<number> {\r\n\r\n    /**\r\n     * Nome do tenant\r\n     */\r\n    public tenantName: string = '';\r\n\r\n    /**\r\n     * Descrição do tenant\r\n     */\r\n    public name: string = '';\r\n\r\n    /**\r\n     * Conexão do tenant\r\n     */\r\n    // private connectionString: string = '';\r\n\r\n    /**\r\n     * Tenant está ativo\r\n     */\r\n    public isActive: boolean = false;\r\n\r\n    /**\r\n     * Método construtor para inicializar a classe tenants.\r\n     * @param Objeto representando a tenants.\r\n     */\r\n    constructor(obj = { id: undefined, tenantName: '', name: '', isActive: true }) {\r\n        super();\r\n        this.id = obj.id;\r\n        this.tenantName = obj.tenantName;\r\n        this.name = obj.name;\r\n        // this.connectionString = obj.connectionString;\r\n        this.isActive = obj.isActive;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/tenant/tenant.service.ts","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { ThfLookupFilter } from '@totvs/thf-ui/components/thf-field';\r\nimport { TenantService } from './tenant.service';\r\nimport { HubApiQueryString } from '../utils/hub-api';\r\n\r\n@Injectable()\r\nexport class TenantThfLookupService implements ThfLookupFilter {\r\n\r\n    constructor(private tenantService: TenantService) { }\r\n\r\n    getFilteredData(filter: string, page: number, pageSize: number): Observable<any> {\r\n        return this.tenantService.getQuery(new HubApiQueryString({\r\n            page,\r\n            pageSize,\r\n            filter: [{ key: \"tenantName\", value: filter }]\r\n        }));\r\n    }\r\n\r\n    getObjectByValue(value: string): Observable<any> {\r\n        return this.tenantService.get(value);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/tenant/tenant.thflookup.service.ts","import { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport { HttpParams } from '@angular/common/http';\r\n\r\n/**\r\n * Interface que padroniza mensagens de retorno\r\n */\r\nexport interface IHubApiMessage {\r\n  /**\r\n   * code: código do erro\r\n   * message: descrição básica do erro\r\n   * detailedMessage: conteúdo detalhado e técnico do erro\r\n   * helpUrl: link para a documentação do erro\r\n   * details: uma lista de objetos de erro (recursiva)\r\n   *          com mais detalhes sobre o erro principal.\r\n   */\r\n  code: String;\r\n  message: String;\r\n  detailedMessage: String;\r\n  helpUrl?: String;\r\n  details?: Array<IHubApiMessage>;\r\n}\r\n\r\n/**\r\n * @description HubApiQueryString\r\n * Esta classe define os métodos e atributos para consulta de dados\r\n */\r\nexport class HubApiQueryString {\r\n  /**\r\n   * page: representa a página solicitada\r\n   * pageSize: representa o total de registros retornados na consulta\r\n   * filter: representa os parâmetros de filtro solicitados\r\n   * expand: parâmetro para expansão de propriedades na consulta\r\n   */\r\n  public page?: number;\r\n  public pageSize?: number;\r\n  public filter?: Array<HubApiFilter>;\r\n  public expand?: Array<string>;\r\n\r\n  /**\r\n   * Método construtor que inicializa o objeto\r\n   * @param entidade\r\n   */\r\n  constructor({ page, pageSize, filter, expand }: HubApiQueryString = { page: 1, pageSize: 20, filter: undefined, expand: undefined }) {\r\n    this.page = page;\r\n    this.pageSize = pageSize;\r\n    this.filter = filter;\r\n    this.expand = expand;\r\n  }\r\n\r\n  /**\r\n   * Retorna os parâmetros de consulta(page, pageSize, filter e expand) em formato string\r\n   */\r\n  getQueryString?(): HttpParams {\r\n    let pars = new HttpParams();\r\n    let cont: string;\r\n    if (this.page) {\r\n      cont = this.page.toString();\r\n      if (cont) {\r\n        pars = pars.set('page', cont);\r\n      }\r\n    }\r\n\r\n    if (this.pageSize) {\r\n      cont = this.pageSize.toString();\r\n      if (cont) {\r\n        pars = pars.set('pageSize', cont);\r\n      }\r\n    }\r\n\r\n    if (this.expand) {\r\n      cont = this.expand.join(',');\r\n      if (cont) {\r\n        pars = pars.set('expand', cont);\r\n      }\r\n    }\r\n\r\n    if (this.filter) {\r\n        for(let f of this.filter){\r\n          pars = pars.set(f.key, f.value.toString());\r\n        }\r\n    }\r\n\r\n    return pars;\r\n  }\r\n}\r\n\r\nexport class HubApiFilter {\r\n  key: string;\r\n  value: any;\r\n}\n\n\n// WEBPACK FOOTER //\n// D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/utils/hub-api.ts","import { Observable } from 'rxjs/Observable';\r\nimport { IHubApiMessage } from './hub-api';\r\nimport { NgForm, AbstractControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router, Params, NavigationEnd } from '@angular/router';\r\nimport { OnInit, ViewChild, EventEmitter } from '@angular/core';\r\nimport { IHubCRUDService } from './hub-crud-service.interface';\r\nimport { hubMessage } from '../app.component';\r\nimport { IHubEntity } from './hub-entity.interface';\r\n\r\n/**\r\n * @description\r\n * Interface que define o modelo abstrato contendo os atributos e métodos padrão.\r\n */\r\nexport interface IHubCrudComponentForm<T extends IHubEntity<TPrimaryKey>, TPrimaryKey> {\r\n    data: T;\r\n    closeOnSave?: boolean;\r\n    paramId?: TPrimaryKey;\r\n}\r\n\r\n/**\r\n * @description\r\n * Classe abstrata que implementa a interface IHubCrudComponentForm, implementando os métodos padrão.\r\n */\r\nexport abstract class HubCrudComponentForm<T extends IHubEntity<TPrimaryKey>, TPrimaryKey> implements IHubCrudComponentForm<T, TPrimaryKey>, OnInit {\r\n\r\n    /**\r\n     * Atributo que recebe o tipo de acordo com o modelo de dados.\r\n     */\r\n    data: T;\r\n\r\n    /**\r\n     * Atributo indica se o registro filho foi modificado.\r\n     */\r\n    childModified = false;\r\n\r\n    /**\r\n     * Atributo indica se irá fechar a tela ao salvar.\r\n     */\r\n    closeOnSave = true;\r\n\r\n    /**\r\n     * Atributo indica a chave primária do registro do formulário.\r\n     */\r\n    paramId: TPrimaryKey;\r\n\r\n    public isUpdate = false;\r\n\r\n    /**\r\n     * Evento emitido antes de editar;\r\n     */\r\n    public beforeEditing: EventEmitter<T> = new EventEmitter();\r\n\r\n    /**\r\n     * Evento emitido antes de editar;\r\n     */\r\n    public beforePersisting: EventEmitter<T> = new EventEmitter();\r\n\r\n    /**\r\n     * Atributo com os parâmetros da URL.\r\n     */\r\n    private params: Params;\r\n\r\n    /**\r\n     * Ultima URL acessada, para realizar os retornos de rota.\r\n     */\r\n    private lastUrl: string;\r\n\r\n    /**\r\n     * Comportamentos para formulário filho de outro\r\n     */\r\n    private asGrandChild = false;\r\n\r\n    /**\r\n     * Atributo que indica o formulário da tela.\r\n     */\r\n    @ViewChild('form') form: NgForm;\r\n\r\n    /**\r\n     * Construtor para inicialização da classe.\r\n     * @param activatedRoute Objeto para obter os parâmetros da URL.\r\n     * @param router Parâmetro para navegação entre as rotas.\r\n     * @param dataService Serviço de dados da entidade a ser manipulada.\r\n     * @param Entity Entidade a ser manipulada.\r\n     */\r\n    constructor(protected activatedRoute: ActivatedRoute,\r\n        public router: Router,\r\n        public dataService: IHubCRUDService,\r\n        public Entity: { new(b): T; }) {\r\n        this.data = new Entity(undefined);\r\n    }\r\n\r\n    /**\r\n     * Método executado ao iniciar o componente, realizando os tratamentos iniciais, como leitura de parâmetros \r\n     * da URL.\r\n     */\r\n    ngOnInit() {\r\n\r\n        this.activatedRoute.queryParams.subscribe((params: Params) => {\r\n            if (params['_back']) {\r\n                this.lastUrl = params['_back'];\r\n                this.asGrandChild = true;\r\n            }\r\n        })\r\n\r\n        this.activatedRoute.params.subscribe((params: DhKeyGenParams) => {\r\n            this.paramId = undefined;\r\n            if (params['id'] !== undefined) {\r\n                this.paramId = params['id'];\r\n                this.isUpdate = true;\r\n            }\r\n            this.params = params;\r\n            if (this.paramId !== undefined) {\r\n                this.saveNew = undefined;\r\n                this.dataService.get(this.paramId).subscribe((res) => {\r\n                    this.data = new this.Entity(res);\r\n                    this.beforeEditing.emit(this.data);\r\n                });\r\n            } else\r\n                this.beforeEditing.emit(this.data);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Método executado ao voltar.\r\n     * @param saveNew Indica que a ação está em sendo executada ao utilizar o botão \"Salvar e Novo\".\r\n     * @param cancel Indica que está sendo executado a partir do botão \"Cancelar\".\r\n     */\r\n    back(saveNew = false, cancel = false) {\r\n        this.childModified = false;\r\n        if (saveNew === true) {\r\n            this.data = new this.Entity(undefined);\r\n            if (this.form) {\r\n                this.form.resetForm(this.data);\r\n            }\r\n        } else {\r\n            if (cancel || this.closeOnSave) {\r\n                if (this.asGrandChild) {\r\n                    this.router.navigate([this.lastUrl]);\r\n                } else {\r\n                    this.router.navigate([this.dataService.serviceName]);\r\n                }\r\n            } else {\r\n                if (!this.asGrandChild) {\r\n                    const rota = [`${this.dataService.serviceName}/edit`].concat(this.paramId.toString());\r\n                    this.router.navigate(rota)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Método retorna se o formulário teve algum dado alterado.\r\n     */\r\n    isFormChanged(): boolean {\r\n        let control: AbstractControl;\r\n        if (this.childModified) {\r\n            return true;\r\n        }\r\n        if (this.form) {\r\n            // tslint:disable-next-line:forin\r\n            for (const x in this.form.form.controls) {\r\n                control = this.form.form.controls[x];\r\n                if (control.dirty) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Marca os campos como Pristine\r\n     */\r\n    markFormPristine() {\r\n        for (const x in this.form.form.controls) {\r\n            if (this.form.form.controls) {\r\n                this.form.form.controls[x].markAsPristine();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Método retorna se o formulário é válido.\r\n     */\r\n    isFormValid() {\r\n        let control: AbstractControl;\r\n        let ret = true;\r\n        if (this.form) {\r\n            // tslint:disable-next-line:forin\r\n            for (const x in this.form.form.controls) {\r\n                control = this.form.form.controls[x];\r\n                if (control.errors) {\r\n                    control.markAsDirty({ onlySelf: true });\r\n                    ret = false;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Método executado ao pressionar o botão \"Cancelar\".\r\n     */\r\n    public cancel(): void {\r\n        if (this.isFormChanged() === false) {\r\n            this.back(false, true);\r\n        } else {\r\n            hubMessage.openMessageQuestion(\r\n                'Deseja cancelar a edição do registro?', 'Edição').subscribe((confirm) => {\r\n                    if (confirm) {\r\n                        this.back(false, true);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Método que retorna um post ou put de acordo com o método necessário para a ação atual do\r\n     * formulário (inclusão ou edição).\r\n     */\r\n    getMethod(): Observable<any> {\r\n        if (this.saveNew === undefined && this.data.id !== undefined) {\r\n            return this.dataService.put(this.data, this.data.id);\r\n        } else {\r\n            return this.dataService.post(this.data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Método que execução inclusão/edição do registro.\r\n     * @param saveNew Parâmetro indica se a opção utilizada foi \"Salvar\" ou \"Salvar e Novo\".\r\n     */\r\n    public save(saveNew = false): void {\r\n        const self = this;\r\n        if (this.isFormChanged() === false\r\n            && this.saveNew === undefined\r\n            && this.cancel !== undefined) {\r\n            hubMessage.openMessageQuestion(\r\n                'Os dados não foram alterados. Continuar editando?', 'Edição').subscribe((confirm) => {\r\n                    if (confirm === false) {\r\n                        self.back(false, true);\r\n                    }\r\n                });\r\n        } else {\r\n            if (this.isFormValid()) {\r\n                this.beforePersisting.emit(this.data);\r\n                this.getMethod()\r\n                    .subscribe(success => {\r\n                        if (success) {\r\n                            if (!!success.messages && success.messages)\r\n                                return;\r\n                            hubMessage.openMessageInformation(\r\n                                `Registro ${this.saveNew === undefined ? 'alterado' : 'incluído'} com sucesso!`);\r\n                            if (this.saveNew && success && success.id) {\r\n                                this.paramId = success.id;\r\n                            }\r\n                            this.markFormPristine();\r\n                            this.back(saveNew);\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Método executado ao pressionar o botão \"Salvar e Novo\".\r\n     */\r\n    public saveNew(): void {\r\n        this.save(true);\r\n    }\r\n\r\n    /**\r\n     * Método para verificar se o registro filho pode ser editado ou não.\r\n     * Em caso positivo realiza a navegação para a rota apropriada para tal.\r\n     * @param child Serviço de dados do filho.\r\n     * @param childIdValue Array contendo a chave primária do registro filho.\r\n     */\r\n    public defaultGrandChildEditHandle(child: IHubCRUDService, ...childIdValue) {\r\n        if (this.childModified) {\r\n            return hubMessage.openMessageInformation('Salve o registro antes de efetuar essa operação.');\r\n        }\r\n        let rota = [`${this.dataService.serviceName}/edit/${child.serviceName}`]\r\n        childIdValue.forEach((el) => {\r\n            rota = rota.concat(el)\r\n        })\r\n        this.router.navigate(rota, { queryParams: { _back: this.router.url } });\r\n\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/utils/hub-crud-component-edit.ts","import { OnInit, ViewChild } from '@angular/core';\r\nimport { IHubApiMessage } from './hub-api';\r\nimport { ThfModalComponent } from '@totvs/thf-ui/components/thf-modal/thf-modal.component';\r\nimport { Router } from '@angular/router';\r\nimport { ThfPageFilter } from '@totvs/thf-ui/components/thf-page';\r\nimport { ThfPageAction } from '@totvs/thf-ui/components/thf-page';\r\nimport { AbstractControl, NgForm } from '@angular/forms';\r\nimport { IHubCRUDService } from './hub-crud-service.interface';\r\nimport { hubMessage } from '../app.component';\r\nimport { ThfModalAction } from '@totvs/thf-ui/components/thf-modal';\r\nimport { IHubEntity } from './hub-entity.interface';\r\nimport { ThfTableAction } from '@totvs/thf-ui/components/thf-table';\r\n\r\n/**\r\n * @usedBy HubCrudComponentList\r\n * Interface com as definições dos atributos e métodos do componente de listagem\r\n */\r\nexport interface IHubCrudComponentList<T extends IHubEntity<TPrimaryKey>, TPrimaryKey> {\r\n\r\n    /**\r\n     * thfActions: atributo com as ações da lista de dados\r\n     * thfListActions: atributo com as ações dos registros lista de dados\r\n     * thfFilter: atributo que define as ações de filtro\r\n     * thfAdvancedSearch: atributo com a referência do componente ThfModal\r\n     * quickSearch: campo de pesquisa rápida\r\n     */\r\n    thfActions: Array<ThfPageAction>;\r\n    thfListActions: Array<ThfTableAction>;\r\n    thfFilter: ThfPageFilter;\r\n    thfAdvancedSearch?: ThfModalComponent;\r\n    quickSearch: string;\r\n\r\n    /** openAdvancedSearch(): método que abre o modal de pesquisa avançada */\r\n    openAdvancedSearch();\r\n\r\n    /** cancelAdvancedSearch(): método que cancela e fecha o modal de pesquisa avançada */\r\n    cancelAdvancedSearch();\r\n\r\n    /** confirmAdvancedSearch(): método que confirma e fecha o modal de pesquisa avançada */\r\n    confirmAdvancedSearch();\r\n\r\n    /** filterAction(isAdvancedSearch: boolean): método com a ação de buscar os dados de acordo com o filtro passado*/\r\n    filterAction(isAdvancedSearch: boolean);\r\n\r\n    /** setFilters(isAdvancedSearch: boolean): método que seta os filtros passados pelo usuário */\r\n    setFilters(isAdvancedSearch: boolean);\r\n\r\n    /** update(): método que trata o registro que será enviado para edição */\r\n    update();\r\n\r\n    /** delete(): método que trata o registro que será enviado para exclusão */\r\n    delete();\r\n\r\n    /** updateRecord(id: TPrimaryKey): método que valida o registro passado por parâmetro e faz a abertura da página de edição */\r\n    updateRecord(id: TPrimaryKey);\r\n\r\n    /** deleteRecord(id: TPrimaryKey, confirmation: boolean): método que valida o registro passado por parâmetro antes da exclusão*/\r\n    deleteRecord(id: TPrimaryKey, confirmation: boolean);\r\n\r\n}\r\n\r\n/**\r\n * @description HubCrudComponentList\r\n * Classe abstrata para o componente de listagem de dados\r\n * @extends HubEntity\r\n */\r\nexport abstract class HubCrudComponentList<T extends IHubEntity<TPrimaryKey>, TPrimaryKey> implements IHubCrudComponentList<T, TPrimaryKey>, OnInit {\r\n\r\n    /** Indica se executa o filtro avançado na abertura da tela */\r\n    filterInit: boolean;\r\n\r\n    /** thfActions: abstração do atributo com as ações da lista de dados */\r\n    abstract thfActions;\r\n\r\n    /** Atributo que possui a referência do formulário */\r\n    @ViewChild('form') form: NgForm;\r\n\r\n    /**\r\n     * thfListActions: atributo com as ações dos registros lista de dados\r\n     */\r\n    thfListActions: Array<ThfTableAction> = [\r\n        { action: 'update', label: 'Editar' },\r\n        { action: 'delete', label: 'Excluir' }\r\n    ];\r\n\r\n    /** thfAdvancedSearch: abstração do atributo com a referência do componente ThfModal */\r\n    abstract thfAdvancedSearch: ThfModalComponent;\r\n\r\n    /** quickSearch: campo de pesquisa rápida */\r\n    quickSearch: string;\r\n\r\n    /** thfFilter: atributo que define as ações de filtro */\r\n    thfFilter: ThfPageFilter = {\r\n        placeholder: 'Busca',\r\n        action: this.filterAction,\r\n        ngModel: 'quickSearch',\r\n        // advancedAction: this.openAdvancedSearch\r\n    };\r\n\r\n    thfAdvancedSearchName: string = \"Filtrar Busca\";\r\n\r\n    /**\r\n     * Ação primária do modal de busca avançada\r\n     */\r\n    advancedSearchPrimaryAction: ThfModalAction = {\r\n        label: 'Confirmar',\r\n        action: () => {\r\n            this.confirmAdvancedSearch();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ação secundária do modal de busca avançada\r\n     */\r\n    advancedSearchSecondaryAction: ThfModalAction = {\r\n        label: 'Cancelar',\r\n        action: () => {\r\n            this.cancelAdvancedSearch();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Método construtor que inicializa o objeto\r\n     * @param router\r\n     * @param dataService\r\n     * @param Entity\r\n     */\r\n    constructor(public router: Router,\r\n        public dataService: IHubCRUDService,\r\n        protected Entity: { new(b): T; }) {\r\n    }\r\n\r\n    /**\r\n     * Método padrão do Angular executado ao inicializar o componente\r\n     */\r\n    ngOnInit() {\r\n        if (this.filterInit) {\r\n            this.filterAction(true)\r\n        } else {\r\n            this.dataService.page = 1;\r\n            this.dataService.getItems();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Abstração do método que seta os filtros solicitados pelo usuário\r\n     * @param isAdvancedSearch\r\n     */\r\n    abstract setFilters(isAdvancedSearch: boolean);\r\n\r\n    /**\r\n     * Método que possui as ações de filtro de dados\r\n     * @param isAdvancedSearch\r\n     */\r\n    filterAction(isAdvancedSearch = false): void {\r\n        this.dataService.page = 1;\r\n        this.setFilters(isAdvancedSearch);\r\n        this.dataService.getItems();\r\n    }\r\n\r\n    /**\r\n     * método que abre o modal de pesquisa avançada\r\n     */\r\n    openAdvancedSearch() {\r\n        this.thfAdvancedSearch.open();\r\n    }\r\n\r\n    /**\r\n     * método que cancela e fecha o modal de pesquisa avançada\r\n     */\r\n    cancelAdvancedSearch(): void {\r\n        this.thfAdvancedSearch.close();\r\n    }\r\n\r\n    /** método que confirma e fecha o modal de pesquisa avançada */\r\n    confirmAdvancedSearch(): void {\r\n        if (this.isFormValid()) {\r\n            this.thfAdvancedSearch.close();\r\n            this.filterAction(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * método que trata o registro que será enviado para edição\r\n     * @param item item/registro da lista\r\n     */\r\n    update(item?: T) {\r\n        if (item) {\r\n            item = new this.Entity(item);\r\n            this.updateRecord(item.id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * método que trata o registro que será enviado para exclusão\r\n     * @param item item/registro da lista\r\n     */\r\n    delete(item?: T) {\r\n        if (item) {\r\n            item = new this.Entity(item);\r\n            this.deleteRecord(item.id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * método que valida o registro passado por parâmetro e faz a abertura da página de edição\r\n     * @param id parâmetro que recebe o id do registro que será editado\r\n     */\r\n    updateRecord(id: TPrimaryKey) {\r\n        const rota = [`${this.dataService.serviceName}/edit`].concat(id.toString());\r\n        this.router.navigate(rota);\r\n    }\r\n\r\n    /**\r\n     * método que valida o registro passado por parâmetro antes da exclusão\r\n     * @param id parâmetro que recebe o id do registro que será excluído\r\n     * @param confirmation indica se deve ser exibida a mensagem de confirmação\r\n     */\r\n    deleteRecord(id: TPrimaryKey, confirmation = true) {\r\n        const self = this;\r\n        hubMessage.openMessageQuestion('Deseja realmente excluir o registro selecionado?', 'Exclusão')\r\n            .subscribe((confirm) => {\r\n                if (confirm) {\r\n                    self.dataService.delete(id)\r\n                        .subscribe((data) => {\r\n                            if (data && data.messages !== null) {\r\n                                if (data.messages[0].code >= 400) {\r\n                                    hubMessage.openMessageError(data.messages[0].detail);\r\n                                    return;\r\n                                }\r\n                                hubMessage.openMessageInformation('Registro excluído com sucesso!');\r\n                            }\r\n                            self.dataService.page = 1;\r\n                            self.dataService.getItems();\r\n                        });\r\n                }\r\n            })\r\n    }\r\n\r\n    /**\r\n     * método que valida se o formulário está válido\r\n     */\r\n    isFormValid() {\r\n        let control: AbstractControl;\r\n        let ret = true;\r\n        // tslint:disable-next-line:forin\r\n        for (const x in this.form.form.controls) {\r\n            control = this.form.form.controls[x];\r\n            if (control.errors) {\r\n                control.markAsDirty({ onlySelf: true });\r\n                ret = false;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/utils/hub-crud-component-list.ts","import { Observable } from 'rxjs/Observable';\r\nimport { HubApiQueryString, IHubApiMessage, HubApiFilter } from './hub-api';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { IHubCRUDService } from './hub-crud-service.interface';\r\nimport { ThfTableColumn } from '@totvs/thf-ui/components/thf-table';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { environment } from '../../environments/environment';\r\n\r\n/**\r\n * @description\r\n * Classe abstrata que implementa os métodos padrão da interface IHubCRUDService, sendos os métodos específicos\r\n * implementados diretamente no serviço que extende da classe abstrata.\r\n */\r\nexport abstract class HubCRUDService implements IHubCRUDService {\r\n\r\n    /**\r\n     * Atributo da URL que será definido no serviço que extende a classe.\r\n     */\r\n    baseUrl: string = \"api\";\r\n\r\n    /**\r\n     * Atributo para controle de paginação, indicando qual a página a ser recuperada do servidor.\r\n     */\r\n    page = 1;\r\n\r\n    /**\r\n     * Atributo para controle de paginação, indicando o número de registros a ser recuperados do servidor.\r\n     */\r\n    pageSize = 20;\r\n\r\n    /**\r\n     * Atributo para controle da paginação, indicando se existe a próxima página.\r\n     */\r\n    hasNext = false;\r\n\r\n    /**\r\n     * Array dos elementos que serão mostrados na lista.\r\n     */\r\n    items = [];\r\n\r\n    /**\r\n     * Atributo para controle do filtro OData, baseada na classe HubApiFilter.\r\n     */\r\n    filter: Array<HubApiFilter>;\r\n\r\n    /**\r\n     * Atributo que relaciona os filhos presentes em um array retornado do serviço REST.\r\n     */\r\n    private expand: Array<string> = [];\r\n\r\n    /**\r\n     * Array utilizado para conversão do padrão que a interface utiliza e que o REST consome, representando os\r\n     * valores qu serão removidos da \"raiz\" do objeto.\r\n     */\r\n    private removeFromData: Array<string> = [];\r\n\r\n    /**\r\n     * Atributo do nome do serviço que será definido no serviço que extende a classe.\r\n     */\r\n    abstract serviceName: string;\r\n\r\n    /**\r\n     * Atributo com as colunas apresentadas na tabela da lista.\r\n     */\r\n    abstract columns: Array<ThfTableColumn>;\r\n\r\n    /**\r\n     * Emite os dados recebidos pelo getItems\r\n     */\r\n    gotData: Subject<Array<any>> = new Subject();\r\n\r\n    /**\r\n     * Construtor da classe.\r\n     * @param http Serviço HTTP para consumo de serviços REST.\r\n     * @param Entity Objeto que aponta para o modelo de dados do serviço.\r\n     */\r\n    constructor(protected http: HttpClient,\r\n        public Entity?: { new(b): any; }) {\r\n    }\r\n\r\n    /**\r\n     * Método que retorna as colunas da tabela, definido no serviço que extende a classe.\r\n     */\r\n    getColumns(): Array<ThfTableColumn> {\r\n        return this.columns;\r\n    }\r\n\r\n    /**\r\n     * Método que adiciona valores ao atributo expand.\r\n     * @param expand String a ser adicionada ao array.\r\n     */\r\n    addExpand(expand: string) {\r\n        if(!this.expand.includes(expand))\r\n            this.expand.push(expand);\r\n    }\r\n\r\n    /**\r\n     * Método que adiciona valores ao atributo removeFromData.\r\n     * @param remove Array de valores a serem concatenados ao atributo removeFromData.\r\n     */\r\n    setRemoveFromData(...remove: Array<string>) {\r\n        this.removeFromData = this.removeFromData.concat(remove)\r\n    }\r\n\r\n    /**\r\n     * Método que adiciona os pathParam a URL, a partir dos valores globais e do array recebido.\r\n     * @param p Array de valores a serem adicionados a URL.\r\n     */\r\n    urlParser(...p: Array<any>) {\r\n\r\n        let url = '/';\r\n        p.forEach((param) => {\r\n            if (param) {\r\n                url += `${param}/`;\r\n            }\r\n        });\r\n        return url.substr(0, url.length - 1);\r\n    }\r\n\r\n    /**\r\n     * Método que converte os objetos do padrão retornado pelo REST para o padrão da interface.\r\n     * @param dataIn Objeto de entrada.\r\n     * @param outData Dados de retorno.\r\n     * @param ignore Dados a serem ignorados.\r\n     */\r\n    fromRest(dataIn, outData?, ignore = '') {\r\n        outData = outData || {};\r\n        for (const prop of Object.keys(dataIn)) {\r\n            if (!ignore || prop.search(ignore) === -1) {\r\n                outData[prop] = dataIn[prop];\r\n            }\r\n        }\r\n        return outData;\r\n    }\r\n\r\n    /**\r\n     * Método recebe um array representando os path param, para realizar um get para o servidor.\r\n     */\r\n    get(...pathParam: Array<any>) {\r\n        if (pathParam.length === 0) {\r\n            throw new Error('HubCRUDService: pathParam obrigatório. Para retornar mais de um registro, utilize getQuery/getItems');\r\n        }\r\n        const url = this.urlParser(...pathParam);\r\n        return this.http.get<any>(`${environment.managementEndPoint}/${this.baseUrl}/${this.serviceName}${url}`,\r\n            {\r\n                params: new HubApiQueryString({\r\n                    page: undefined,\r\n                    pageSize: undefined,\r\n                    expand: this.expand\r\n                }).getQueryString()\r\n            })\r\n            .map((res) => {\r\n                const data = this.fromRest(res); // length e messages\r\n                return data;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Método que executa o get no servidor, passando parâmetros via query string, além dos path param.\r\n     * @param query Parâmetros query string.\r\n     * @param pathParam Parâmetros do pathParam.\r\n     */\r\n    getQuery(query: HubApiQueryString, ...pathParam: Array<any>) {\r\n        const url = this.urlParser(...pathParam);\r\n        return this.http.get<any>(`${environment.managementEndPoint}/${this.baseUrl}/${this.serviceName}${url}`,\r\n            {\r\n                params: query.getQueryString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Método que recebe o corpo da requisição, além dos path param que irão na URL para reailizar um post no\r\n     * servidor.\r\n     * @param body Objeto com o corpo da requisição.\r\n     * @param pathParam Parâmetros de path, passados para o serviço.\r\n     */\r\n    post(body: any, ...pathParam: Array<any>) {\r\n        const url = this.urlParser(...pathParam);\r\n        return this.http.post<any>(`${environment.managementEndPoint}/${this.baseUrl}/${this.serviceName}${url}`,\r\n            body);\r\n    }\r\n\r\n    /**\r\n     * Método que recebe o corpo da requisição, além dos path param que irão na URL para reailizar um put no\r\n     * servidor.\r\n     * @param body Objeto com o corpo da requisição.\r\n     * @param pathParam Parâmetros de path, passados para o serviço.\r\n     */\r\n    put(body: any, ...pathParam: Array<any>) {\r\n        const url = this.urlParser(...pathParam);\r\n        return this.http.put<any>(`${environment.managementEndPoint}/${this.baseUrl}/${this.serviceName}${url}`,\r\n            body);\r\n    }\r\n\r\n    /**\r\n     * Método recebe um array representando os path param, para realizar um delete para o servidor.\r\n     */\r\n    delete(...pathParam: Array<any>) {\r\n        const url = this.urlParser(...pathParam);\r\n        return this.http.delete<any>(`${environment.managementEndPoint}/${this.baseUrl}/${this.serviceName}${url}`);\r\n    }\r\n\r\n    /**\r\n     * Método para receber os dados do servidor, verificar as mensagens e setar o atributo items.\r\n     * @param more Parâmetro que indica se o get é para buscar a próxima página.\r\n     * @param cast Parâmetro que indica se será executada a conversão do objeto para o modelo de dados.\r\n     */\r\n    getItems(more = false, cast = false) {\r\n        const self = this;\r\n        this.getQuery(\r\n            new HubApiQueryString({\r\n                page: this.page,\r\n                pageSize: this.pageSize,\r\n                filter: this.filter\r\n            })\r\n        ).subscribe(\r\n            (success) => {\r\n                if (success !== undefined && success !== null) {\r\n                    self.hasNext = success.hasNext || success.hasNext;\r\n\r\n                    if (cast && self.Entity) {\r\n                        for (let i = 0; i < success.items.length; i++) {\r\n                            success.items[i] = new this.Entity(success.items[i]);\r\n                        };\r\n                    }\r\n                    if (more === true) {\r\n                        self.items = self.items.concat(success.items);\r\n                    } else {\r\n                        self.items = success.items;\r\n                    }\r\n\r\n                    var checkColumns = self.getColumns().reduce(function (arr, c) {\r\n                        if (c.type === \"check\") arr.push(c.column); return arr;\r\n                    }, []);\r\n\r\n                    for (var itemIndex in self.items) {\r\n                        var item = self.items[itemIndex];\r\n\r\n                        for (var i in checkColumns) {\r\n                            var col = checkColumns[i];\r\n                            item[col] = item[col] ? 'Sim' : 'Não';\r\n                        }\r\n                    }\r\n\r\n                    this.gotData.next(success.items);\r\n                    if (!self.hasNext) {\r\n                        this.gotData.complete();\r\n                        this.gotData = new Subject();\r\n                    }\r\n                } else {\r\n                    self.hasNext = false;\r\n                    self.items = [];\r\n                    this.gotData.complete();\r\n                    this.gotData = new Subject();\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Método para buscar a próxima página.\r\n     * @param page Página que será retornada\r\n     * @param cast Indicação de conversão do objeto para o modelo de dados.\r\n     */\r\n    more(page: number = this.page + 1, cast = false) {\r\n        if (page > this.page) {\r\n            this.page = page;\r\n        }\r\n        this.getItems(true, cast);\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/utils/hub-crud-service.ts","import { IHubEntity } from './hub-entity.interface';\r\n\r\n/**\r\n * @description\r\n * Classe abstrata que implementa os métodos da interface IHubEntity\r\n */\r\nexport abstract class HubEntity<T> implements IHubEntity<T> {\r\n\r\n    public id: T;\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// D:/git/Tnf-Rac/src/Tnf.Rac.Host/ClientApp/src/app/utils/hub-entity.ts"],"sourceRoot":"webpack:///"}